using System.Net;
using NUnit.Framework;
using RestSharp;
using StorySpoiler.ApiTests.DTOs;

namespace StorySpoiler.ApiTests;

[TestFixture]
public class StorySpoilerTests
{
    private const string BaseUrl = "https://d3s5nxhwblsjbi.cloudfront.net/api";
    private static RestClient _client = default!;
    private static string? _token;
    private static string? _storyId;
    private static string _createdUserName = string.Empty;
    private static string _createdPassword = string.Empty;

    [OneTimeSetUp]
    public void OneTimeSetup()
    {
        var options = new RestClientOptions(BaseUrl);
        _client = new RestClient(options);

        var envUser = Environment.GetEnvironmentVariable("STORY_USER");
        var envPass = Environment.GetEnvironmentVariable("STORY_PASS");

        bool loggedIn = false;
        if (!string.IsNullOrWhiteSpace(envUser) && !string.IsNullOrWhiteSpace(envPass))
        {
            loggedIn = TryLogin(envUser!, envPass!);
        }

        if (!loggedIn)
        {
            _createdUserName = $"alexanaskovski{DateTime.UtcNow:yyyyMMddHHmmss}_{Guid.NewGuid():N}".Substring(0, 30);
            _createdPassword = "shelbymelby" + Guid.NewGuid().ToString("N")[..10];

            var createUserReq = new RestRequest("User/Create", Method.Post);
            createUserReq.AddJsonBody(new
            {
                userName = _createdUserName,
                firstName = "QA",
                midName = "Auto",
                lastName = "Tester",
                email = $"{_createdUserName}@example.com",
                password = _createdPassword,
                rePassword = _createdPassword
            });

            _client.Execute(createUserReq);
            loggedIn = TryLogin(_createdUserName, _createdPassword);

            if (!loggedIn)
                Assert.Fail("Unable to authenticate.");
        }

        _client.AddDefaultHeader("Authorization", $"Bearer {_token}");
    }

    private bool TryLogin(string username, string password)
    {
        var loginReq = new RestRequest("User/Authentication", Method.Post);
        loginReq.AddJsonBody(new { userName = username, password = password });

        var loginResp = _client.Execute<LoginResponse>(loginReq);
        if (loginResp.StatusCode == HttpStatusCode.OK && loginResp.Data != null && !string.IsNullOrEmpty(loginResp.Data.accessToken))
        {
            _token = loginResp.Data.accessToken;
            return true;
        }
        return false;
    }

    private record LoginResponse(string userName, string password, string accessToken);

    [Test, Order(1)]
    public void CreateStory_ShouldReturn201_AndStoryId_AndMessage()
    {
        var request = new RestRequest("Story/Create", Method.Post);
        var body = new StoryDTO
        {
            Title = "The Watcher – Twist Ending",
            Description = "Final reveal hints the narrator was unreliable. Autogenerated test " + Guid.NewGuid(),
            Url = ""
        };
        request.AddJsonBody(body);

        var response = _client.Execute<ApiResponseDTO>(request);

        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Created));
        Assert.That(response.Data, Is.Not.Null);
        Assert.That(response.Data!.StoryId, Is.Not.Null.And.Not.Empty);
        Assert.That(response.Data!.Msg, Does.Contain("Successfully created"));

        _storyId = response.Data!.StoryId;
    }

    [Test, Order(2)]
    public void EditStory_ShouldReturn200_AndMessage()
    {
        Assert.That(_storyId, Is.Not.Null.And.Not.Empty);
        var request = new RestRequest($"Story/Edit/{_storyId}", Method.Put);

        var updated = new StoryDTO
        {
            Title = "The Watcher – Edited",
            Description = "Edited spoiler content by automated test",
            Url = ""
        };
        request.AddJsonBody(updated);

        var response = _client.Execute<ApiResponseDTO>(request);

        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
        Assert.That(response.Data!.Msg, Does.Contain("Successfully edited"));
    }

    [Test, Order(3)]
    public void GetAllStories_ShouldReturn200_AndNonEmptyArray()
    {
        var request = new RestRequest("Story/All", Method.Get);
        var response = _client.Execute<List<object>>(request);

        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
        Assert.That(response.Data, Is.Not.Null);
        Assert.That(response.Data!.Count, Is.GreaterThan(0));
    }

    [Test, Order(4)]
    public void DeleteStory_ShouldReturn200_AndMessage()
    {
        Assert.That(_storyId, Is.Not.Null.And.Not.Empty);
        var request = new RestRequest($"Story/Delete/{_storyId}", Method.Delete);

        var response = _client.Execute<ApiResponseDTO>(request);

        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
        Assert.That(response.Data!.Msg, Does.Contain("Deleted successfully"));
    }

    [Test, Order(5)]
    public void CreateStory_MissingFields_ShouldReturn400()
    {
        var request = new RestRequest("Story/Create", Method.Post);
        request.AddJsonBody(new StoryDTO { Title = null, Description = null, Url = null });

        var response = _client.Execute<ApiResponseDTO>(request);
        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest));
    }

    [Test, Order(6)]
    public void Edit_NonExistingStory_ShouldReturn404_AndMessage()
    {
        var request = new RestRequest($"Story/Edit/{Guid.NewGuid()}", Method.Put);

        var updated = new StoryDTO
        {
            Title = "The Watcher - Edited",
            Description = "Edited spoiler content by automated test",
            Url = ""
        };
        request.AddJsonBody(updated);

        var response = _client.Execute<ApiResponseDTO>(request);
        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.NotFound));
        Assert.That(response.Data!.Msg, Does.Contain("No spoilers..."));
    }

    [Test, Order(7)]
    public void Delete_NonExistingStory_ShouldReturn400_AndMessage()
    {
        var request = new RestRequest($"Story/Delete/{Guid.NewGuid()}", Method.Delete);

        var response = _client.Execute<ApiResponseDTO>(request);
        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest));
        Assert.That(response.Data!.Msg, Does.Contain("Unable to delete this story spoiler"));
    }
}
